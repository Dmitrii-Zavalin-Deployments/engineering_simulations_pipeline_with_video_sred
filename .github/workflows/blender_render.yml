name: Blender Render  # Workflow name

on:
  push:  # ‚úÖ Runs on every commit to any branch
  workflow_dispatch:  # ‚úÖ Allows manual triggering too

jobs:
  render-blender:
    runs-on: ubuntu-latest
    steps:

      # 1Ô∏è‚É£ Step: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Step: Debug - List Repository Contents at Root
      - name: Debug - List Repository Contents at Root
        run: |
          echo "üîç Listing contents of the repository root:"
          ls -lah $GITHUB_WORKSPACE/

      # 3Ô∏è‚É£ Step: Install System Dependencies
      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip libegl1 ffmpeg

      # 4Ô∏è‚É£ Step: Install Blender
      - name: Install Blender
        run: |
          wget https://download.blender.org/release/Blender4.4/blender-4.4.3-linux-x64.tar.xz
          tar -xvf blender-4.4.3-linux-x64.tar.xz
          mv blender-4.4.3-linux-x64 ~/blender
          sudo ln -s ~/blender/blender /usr/local/bin/blender

      # 5Ô∏è‚É£ Step: Install Python Dependencies (for rendering)
      - name: Install Python Dependencies
        run: |
          pip install dropbox requests opencv-python numpy jsonschema scikit-image

      # 6Ô∏è‚É£ Step: Debug - List Contents of `src/` Directory
      - name: Debug - List Contents of `src/` Directory
        run: |
          echo "üîç Listing contents of the src/ directory:"
          ls -lah src/

      # 7Ô∏è‚É£ Step: Debug - List Contents of `data/` Directory (Corrected)
      - name: Debug - List Contents of `data/` Directory (Corrected)
        run: |
          echo "üîç Listing contents of the data/ directory:"
          ls -lah data/

      # 8Ô∏è‚É£ Step: Ensure `data/testing-input-output/` Directory Exists
      - name: Create `data/testing-input-output/` Directory
        run: |
          mkdir -p data/testing-input-output

      # 9Ô∏è‚É£ Step: Debug - List files in `data/testing-input-output/` Immediately After Creation
      - name: Debug - List files in `data/testing-input-output/` (After Creation)
        run: |
          echo "üîç Listing contents of data/testing-input-output/ after creation:"
          ls -lah data/testing-input-output/

      # üîü Step: Debug - Verify `fluid_dynamics_animation.json` Paths Before Use
      - name: Debug - Verify `fluid_dynamics_animation.json` Paths Before Use
        run: |
          echo "üîç Checking existence of data/testing-input-output/fluid_dynamics_animation.json BEFORE simulation:"
          if [ -f data/testing-input-output/fluid_dynamics_animation.json ]; then
            echo "‚úÖ FOUND: data/testing-input-output/fluid_dynamics_animation.json"
          else
            echo "‚ùå NOT FOUND: data/testing-input-output/fluid_dynamics_animation.json"
          fi

      # 1Ô∏è‚É£1Ô∏è‚É£ Step: Verify `fluid_dynamics_animation.json` exists before simulation
      - name: Verify `fluid_dynamics_animation.json` exists before simulation
        run: |
          if [ -f data/testing-input-output/fluid_dynamics_animation.json ]; then
            echo "‚úÖ `fluid_dynamics_animation.json` detected. Proceeding..."
          else
            echo "‚ùå ERROR: No `fluid_dynamics_animation.json` found in `data/testing-input-output/`!"
            exit 1
          fi

      # 1Ô∏è‚É£2Ô∏è‚É£ Step: Verify Fluid Simulation Script Exists
      - name: Verify Fluid Simulation Script Exists
        run: |
          if [ -f src/fluid_simulation.py ]; then
            echo "‚úÖ fluid_simulation.py found. Proceeding..."
          else
            echo "‚ùå ERROR: fluid_simulation.py not found!"
            exit 1
          fi

      # 1Ô∏è‚É£3Ô∏è‚É£ Step: Set Working Directory and Run Fluid Simulation Inside Blender
      - name: Run Fluid Simulation Inside Blender
        run: |
          cd $GITHUB_WORKSPACE
          ~/blender/blender -b --python src/fluid_simulation.py

      # 1Ô∏è‚É£4Ô∏è‚É£ Step: Debug - Verify Contents of `data/testing-input-output/` After Simulation
      - name: Debug - Verify Contents of `data/testing-input-output/` After Simulation
        run: |
          echo "üîç Listing contents of data/testing-input-output/ AFTER simulation:"
          ls -lah data/testing-input-output/

      # 1Ô∏è‚É£5Ô∏è‚É£ Step: Debug - Verify `main.py` Exists
      - name: Debug - Verify `main.py` Exists
        run: |
          echo "üîç Listing contents of src/ to find main.py:"
          ls -lah src/

      # 1Ô∏è‚É£6Ô∏è‚É£ Step: Run Video Rendering from Correct Directory
      - name: Run Video Rendering
        run: |
          cd src
          python3 main.py

      # 1Ô∏è‚É£7Ô∏è‚É£ Step: Create Video from Rendered Frames and Move It to `data/testing-input-output/`
      - name: Create Video
        run: |
          chmod +x src/create_video.sh
          ./src/create_video.sh
          mkdir -p ./data/testing-input-output/ # Ensure the directory exists before moving
          mv ./RenderedOutput/video.mp4 ./data/testing-input-output/video.mp4

      # 1Ô∏è‚É£8Ô∏è‚É£ Step: Debug - List Contents of `data/testing-input-output/` After Video Creation
      - name: Debug - List Contents of `data/testing-input-output/` After Video Creation
        run: |
          echo "üîç Listing contents of data/testing-input-output/ AFTER video creation:"
          ls -lah data/testing-input-output/

      # 1Ô∏è‚É£9Ô∏è‚É£ Step: Run Unit & Integration Tests for Video Validation
      - name: Run Unit Tests
        run: pytest tests/test_input_validation.py --verbose

      - name: Run Output Validation Tests
        run: pytest tests/test_output_validation.py --verbose

      - name: Run Blender Rendering Tests
        run: pytest tests/test_blender_render.py --verbose

      - name: Run Fluid Motion Analysis Tests
        run: pytest tests/test_video_analysis.py --verbose

      - name: Run Turbulence Validation Tests
        run: pytest tests/test_turbulence_validation.py --verbose

      - name: Run Video Ground Truth Comparison Tests
        run: pytest tests/test_video_comparison.py --verbose

      # 2Ô∏è‚É£0Ô∏è‚É£ Step: Commit and Push `data/testing-input-output/` Folder
      - name: Commit and Push Simulation Output
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"

          git add data/testing-input-output/
          git status
          git diff --cached --quiet && echo "‚úÖ No changes to commit!" || git commit -m "Auto-update: Added fluid_dynamics_animation.json and video"
          git push origin HEAD
