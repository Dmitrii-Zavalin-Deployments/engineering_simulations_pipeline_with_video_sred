name: Turbine Flow Frame Generation (ParaView Headless)

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  render_and_upload_frames:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üêç Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: üßº Clean Previous Output
        run: |
          if [ -d "$GITHUB_WORKSPACE/data/testing-input-output/" ]; then
            rm -rf "$GITHUB_WORKSPACE/data/testing-input-output/*"
            echo "üóëÔ∏è Deleted previous output."
          else
            echo "‚ÑπÔ∏è No existing output found."
          fi

      - name: üõ†Ô∏è Install Python Dependencies
        run: pip install -r requirements.txt

      - name: üîì Set Executable Permissions
        run: |
          chmod +x src/download_from_dropbox.sh
          chmod +x src/upload_to_dropbox.sh

      - name: üì° Download Input Files from Dropbox
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/download_from_dropbox.sh

      - name: üì¶ Install ParaView (Headless)
        run: |
          PV_VERSION="5.11.2"
          PV_DIR="ParaView-${PV_VERSION}-MPI-Linux-Python3.9-x86_64"
          PV_TAR="${PV_DIR}.tar.gz"
          PV_URL="https://www.paraview.org/files/v${PV_VERSION%.*}/${PV_TAR}"

          wget "$PV_URL" -O "/tmp/$PV_TAR" --no-check-certificate
          sudo tar -xzf "/tmp/$PV_TAR" -C /opt
          echo "/opt/${PV_DIR}/bin" >> $GITHUB_PATH

      - name: ‚úÖ Validate ParaView Environment
        run: |
          if [ ! -f "$GITHUB_WORKSPACE/src/debug_paraview_env.py" ]; then
            echo "‚ùå Missing debug_paraview_env.py"
            exit 1
          fi
          which pvpython
          pvpython "$GITHUB_WORKSPACE/src/debug_paraview_env.py"

      - name: üß† Check Visualization Script
        run: |
          if [ ! -f "$GITHUB_WORKSPACE/src/paraview_visualization.py" ]; then
            echo "‚ùå Visualization script not found!"
            exit 1
          fi

      - name: üñ•Ô∏è Install Xvfb for Offscreen Rendering
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: üé¨ Run ParaView and Render Frames
        id: generate_frames
        run: |
          OUTPUT_PATH="$GITHUB_WORKSPACE/data/testing-input-output/turbine_flow_animation.mp4"
          PVD_FILE="$GITHUB_WORKSPACE/data/testing-input-output/vtk_output/turbine_flow_animation.pvd"
          TURBINE_MODEL="$GITHUB_WORKSPACE/data/testing-input-output/3d_model.obj"

          Xvfb :99 -screen 0 1920x1080x24 &
          export DISPLAY=:99

          PYTHON_OUTPUT=$(/opt/ParaView-5.11.2-MPI-Linux-Python3.9-x86_64/bin/pvpython \
            "$GITHUB_WORKSPACE/src/paraview_visualization.py" \
            --pvd-file "$PVD_FILE" \
            --turbine-model "$TURBINE_MODEL" \
            --output-video "$OUTPUT_PATH")

          echo "$PYTHON_OUTPUT"

          PNG_OUTPUT_DIR=$(echo "$PYTHON_OUTPUT" | grep "PNG_OUTPUT_DIR=" | sed 's/PNG_OUTPUT_DIR=//')
          if [ -z "$PNG_OUTPUT_DIR" ]; then
            echo "‚ùå PNG_OUTPUT_DIR not found in script output."
            exit 1
          fi
          echo "PNG_OUTPUT_DIR=$PNG_OUTPUT_DIR" >> "$GITHUB_OUTPUT"

      - name: üîç Verify Frame Count
        run: |
          echo "üñºÔ∏è Rendered Frame Count:"
          find "${{ steps.generate_frames.outputs.PNG_OUTPUT_DIR }}" -name "*.png" | wc -l

      - name: ‚òÅÔ∏è Upload Rendered PNG Frames to Dropbox
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/upload_to_dropbox.sh



