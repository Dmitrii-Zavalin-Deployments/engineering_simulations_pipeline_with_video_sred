name: Fluid Data Processing and Visualization

on:
  push:
    branches:
      - "**" # Triggers on any branch push
  workflow_dispatch: # Allows manual trigger from the GitHub Actions UI

jobs:
  process_fluid_data:
    runs-on: ubuntu-latest # Uses the latest Ubuntu runner provided by GitHub Actions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # Clones your repository into the runner

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9" # Ensure this matches the Python version used by your ParaView build if possible

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Python dependencies for JSON to VTK conversion
        # All required Python packages are now listed in requirements.txt
        run: pip install -r requirements.txt

      - name: Debug Repository Structure (Full)
        run: ls -R "$GITHUB_WORKSPACE"

      - name: Verify JSON to VTK Script Exists
        run: |
          if [ ! -f "$GITHUB_WORKSPACE/src/json_to_vtk.py" ]; then
            echo "❌ Error: json_to_vtk.py not found in src directory!"
            exit 1
          fi

      - name: Run JSON to VTK Conversion
        # Execute your Python script directly using the standard Python interpreter
        run: python "$GITHUB_WORKSPACE/src/json_to_vtk.py"

      # --- Execute Unit & Integration Tests ---
      # # Uncomment and adjust these as needed for your specific tests.
      # - name: Run tests
      #   # Assuming your pytest configuration looks for tests in the 'tests/' directory
      #   run: pytest tests/ --verbose

      - name: Commit and Push Generated VTK Output to Repository (Optional)
        # This step commits the VTK files generated by json_to_vtk.py
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"

          cd "$GITHUB_WORKSPACE" # Navigate to the root of your repository

          OUTPUT_VTK_DIR="data/testing-input-output/vtk_output"

          if [ -d "${OUTPUT_VTK_DIR}" ] && [ -n "$(ls -A ${OUTPUT_VTK_DIR})" ]; then
            git add "${OUTPUT_VTK_DIR}"
            git status
            if [[ $(git diff --cached --quiet; echo $?) -ne 0 ]]; then
              git commit -m "Auto-update: Converted fluid data to VTK format"
              git push origin HEAD
            else
              echo "✅ No new VTK files or changes to commit!"
            fi
          else
            echo "❌ No VTK output files detected in ${OUTPUT_VTK_DIR}, skipping commit."
          fi

      - name: Download ParaView (Headless Version)
        # This step is essential to install ParaView's pvpython on the runner.
        # Without it, the 'pvpython' command in the next step will fail.
        run: |
          PV_VERSION="5.11.2" # Recommended version. Check if it has Python 3.9 or compatible.
          PV_DIR="ParaView-${PV_VERSION}-MPI-Linux-Python3.9-x86_64"
          PV_TAR="${PV_DIR}.tar.gz"
          PV_URL="https://www.paraview.org/files/v${PV_VERSION%.*}/${PV_TAR}"

          echo "Attempting to download ParaView from: $PV_URL"
          wget "$PV_URL" -O "/tmp/$PV_TAR" --no-check-certificate
          
          echo "Extracting ParaView to /opt..."
          sudo tar -xzf "/tmp/$PV_TAR" -C /opt
          
          echo "/opt/${PV_DIR}/bin" >> $GITHUB_PATH
          echo "ParaView's pvpython should now be in PATH."

      - name: Run ParaView Python script to generate video
        # The video will be saved directly into the 'data/testing-input-output/' directory
        run: |
          OUTPUT_VIDEO_PATH="$GITHUB_WORKSPACE/data/testing-input-output/turbine_flow_animation.mp4"
          
          pvpython "$GITHUB_WORKSPACE/src/paraview_visualization.py" \
            --pvd-file "$GITHUB_WORKSPACE/data/testing-input-output/vtk_output/turbine_flow_animation.pvd" \
            --turbine-model "$GITHUB_WORKSPACE/data/testing-input-output/3d_model.obj" \
            --output-video "$OUTPUT_VIDEO_PATH" # Pass the full output path to the script

      - name: Commit and Push Generated Video to Repository
        # This step commits the generated video file
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"

          cd "$GITHUB_WORKSPACE" # Navigate to the root of your repository

          VIDEO_FILE="data/testing-input-output/turbine_flow_animation.mp4"

          if [ -f "${VIDEO_FILE}" ]; then
            git add "${VIDEO_FILE}" # Stage the newly generated video file
            git status # Display current git status for clarity in logs

            if [[ $(git diff --cached --quiet; echo $?) -ne 0 ]]; then
              git commit -m "Auto-update: Generated CFD visualization video"
              git push origin HEAD # Push changes to the current branch
            else
              echo "✅ No changes to video file to commit!"
            fi
          else
            echo "❌ No video file detected at ${VIDEO_FILE}, skipping commit."
          fi
