name: Fluid Data Processing and Visualization

on:
  push:
    branches:
      - "**" # Triggers on any branch push
  workflow_dispatch: # Allows manual trigger from the GitHub Actions UI

jobs:
  process_fluid_data:
    runs-on: ubuntu-latest # Uses the latest Ubuntu runner provided by GitHub Actions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # Clones your repository into the runner

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9" # Ensure this matches the Python version used by your ParaView build if possible

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Python dependencies (if any)
        run: pip install -r requirements.txt

      - name: Debug Repository Structure (Full)
        run: ls -R "$GITHUB_WORKSPACE"

      - name: Download ParaView (Headless Version)
        run: |
          PV_VERSION="5.11.2" # Recommended version. Check if it has Python 3.9 or compatible.
          PV_DIR="ParaView-${PV_VERSION}-MPI-Linux-Python3.9-x86_64"
          PV_TAR="${PV_DIR}.tar.gz"
          # Ensure the URL is correct for the chosen version. For 5.11.2, it's under v5.11/
          PV_URL="https://www.paraview.org/files/v${PV_VERSION%.*}/${PV_TAR}"

          echo "Attempting to download ParaView from: $PV_URL"
          wget "$PV_URL" -O "/tmp/$PV_TAR" --no-check-certificate
          
          echo "Extracting ParaView to /opt..."
          sudo tar -xzf "/tmp/$PV_TAR" -C /opt
          
          echo "/opt/${PV_DIR}/bin" >> $GITHUB_PATH
          echo "ParaView's pvpython should now be in PATH."
    
      - name: Debug ParaView Python Environment
        # Verify the debug script exists before running
        run: |
          if [ ! -f "$GITHUB_WORKSPACE/src/debug_paraview_env.py" ]; then
            echo "❌ Error: debug_paraview_env.py not found in src directory!"
            exit 1
          fi
          echo "Verifying pvpython path:"
          which pvpython
          echo ""
          pvpython "$GITHUB_WORKSPACE/src/debug_paraview_env.py"

      - name: Verify paraview_visualization.py Script Exists
        run: |
          if [ ! -f "$GITHUB_WORKSPACE/src/paraview_visualization.py" ]; then
            echo "❌ Error: paraview_visualization.py not found in src directory! Please ensure it's there."
            exit 1
          fi

      - name: Install Xvfb
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Run ParaView Python script to generate video with Xvfb
        run: |
          OUTPUT_VIDEO_PATH="$GITHUB_WORKSPACE/data/testing-input-output/turbine_flow_animation.mp4"
          PVD_FILE="$GITHUB_WORKSPACE/data/testing-input-output/vtk_output/turbine_flow_animation.pvd"
          TURBINE_MODEL="$GITHUB_WORKSPACE/data/testing-input-output/3d_model.obj"
          
          # Start Xvfb on a display number (e.g., :99)
          Xvfb :99 -screen 0 1920x1080x24 &
          export DISPLAY=:99
          
          # Run pvpython with environment variables for offscreen rendering
          /opt/ParaView-5.11.2-MPI-Linux-Python3.9-x86_64/bin/pvpython \
            "$GITHUB_WORKSPACE/src/paraview_visualization.py" \
            --pvd-file "$PVD_FILE" \
            --turbine-model "$TURBINE_MODEL" \
            --output-video "$OUTPUT_VIDEO_PATH"
        env:
          # Set the offscreen rendering environment variables for ParaView
          PV_ENABLE_OSMESA: 1 # Essential for headless rendering
          PV_OFFSCREEN_HEADLESS: 1 # Also useful for headless environments

      - name: Commit and Push Generated Video to Repository
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"

          cd "$GITHUB_WORKSPACE"

          VIDEO_FILE="data/testing-input-output/turbine_flow_animation.mp4"

          if [ -f "${VIDEO_FILE}" ]; then
            git add "${VIDEO_FILE}"
            git status
            if [[ $(git diff --cached --quiet; echo $?) -ne 0 ]]; then
              git commit -m "Auto-update: Generated CFD visualization video"
              git push origin HEAD
            else
              echo "✅ No changes to video file to commit!"
            fi
          else
            echo "❌ No video file detected at ${VIDEO_FILE}, skipping commit."
          fi
